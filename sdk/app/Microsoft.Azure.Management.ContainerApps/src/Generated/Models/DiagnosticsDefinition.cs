// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ContainerApps.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Metadata of the diagnostics response
    /// </summary>
    public partial class DiagnosticsDefinition
    {
        /// <summary>
        /// Initializes a new instance of the DiagnosticsDefinition class.
        /// </summary>
        public DiagnosticsDefinition()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DiagnosticsDefinition class.
        /// </summary>
        /// <param name="id">Unique detector name</param>
        /// <param name="name">Display Name of the detector</param>
        /// <param name="description">Details of the diagnostics info</param>
        /// <param name="author">Authors' names of the detector</param>
        /// <param name="category">Category of the detector</param>
        /// <param name="supportTopicList">List of support topics</param>
        /// <param name="analysisTypes">List of analysis types</param>
        /// <param name="type">Authors' names of the detector</param>
        /// <param name="score">Authors' names of the detector</param>
        public DiagnosticsDefinition(string id = default(string), string name = default(string), string description = default(string), string author = default(string), string category = default(string), IList<DiagnosticSupportTopic> supportTopicList = default(IList<DiagnosticSupportTopic>), IList<string> analysisTypes = default(IList<string>), string type = default(string), double? score = default(double?))
        {
            Id = id;
            Name = name;
            Description = description;
            Author = author;
            Category = category;
            SupportTopicList = supportTopicList;
            AnalysisTypes = analysisTypes;
            Type = type;
            Score = score;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets unique detector name
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; private set; }

        /// <summary>
        /// Gets display Name of the detector
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; private set; }

        /// <summary>
        /// Gets details of the diagnostics info
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; private set; }

        /// <summary>
        /// Gets authors' names of the detector
        /// </summary>
        [JsonProperty(PropertyName = "author")]
        public string Author { get; private set; }

        /// <summary>
        /// Gets category of the detector
        /// </summary>
        [JsonProperty(PropertyName = "category")]
        public string Category { get; private set; }

        /// <summary>
        /// Gets or sets list of support topics
        /// </summary>
        [JsonProperty(PropertyName = "supportTopicList")]
        public IList<DiagnosticSupportTopic> SupportTopicList { get; set; }

        /// <summary>
        /// Gets or sets list of analysis types
        /// </summary>
        [JsonProperty(PropertyName = "analysisTypes")]
        public IList<string> AnalysisTypes { get; set; }

        /// <summary>
        /// Gets authors' names of the detector
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; private set; }

        /// <summary>
        /// Gets authors' names of the detector
        /// </summary>
        [JsonProperty(PropertyName = "score")]
        public double? Score { get; private set; }

    }
}
